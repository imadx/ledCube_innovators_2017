<%- include header.ejs %>

<script src="/js/qrcode.min.js"></script>

<!-- body content -->
<div id="adminApp" class="admin-interface">
	<div class="row section">
		<div class="col m12">
			<h5 style="display: inline;">Admin
			<small v-show="world.saveCount.count > 0" style="font-size: 11pt; opacity: 0.4;">
			<small>Saved count:</small> {{world.saveCount.count}} times. <small>Last Saved on</small> {{new Date(world.saveCount.lastSaved).toGMTString()}}
			</small>
			</h5>
			<div class="right">
				<span>{{total_clients}} Total Client(s)&nbsp;&nbsp;</span> 
				<a
					onclick="emitMessage('reload_all','')"
					class="btn waves-effect waves-light amber darken-1">
				Reload Clients </a>
				<a
					@click="restoreFromBackupSavedData"
					class="btn waves-effect waves-light amber darken-2">
				Restore Data </a>
				<a
					@click="resetSavedData"
					class="btn waves-effect waves-light amber darken-3">
				Reset Data </a>
				<a
					onclick="hardResetLocalStorage()"
					class="btn waves-effect waves-light amber darken-4">
				Hard Reset Data </a>
				 
			</div>
		</div>
	</div>
	<div class="row section">
	<!--
		d8888b.  .d8b.  d888888b d888888b d88888b d8888b. d8b   db .d8888.
		88  `8D d8' `8b `~~88~~' `~~88~~' 88'     88  `8D 888o  88 88'  YP
		88oodD' 88ooo88    88       88    88ooooo 88oobY' 88V8o 88 `8bo.
		88~~~   88~~~88    88       88    88~~~~~ 88`8b   88 V8o88   `Y8b.
		88      88   88    88       88    88.     88 `88. 88  V888 db   8D
		88      YP   YP    YP       YP    Y88888P 88   YD VP   V8P `8888Y'
		
		
	 -->

		<div class="col s6 m3 l2">
			<h6>Patterns</h6>
			<div class="section widget">
				<small>Last shown Pattern</small>
				<h5 class="amber-text">Pattern {{world.currentPattern}}</h5>
			</div>
			<div class="section">
				<h6 style="opacity: 0.4">All Patterns</h6>
				<div class="row" style="margin-bottom: 0;" 
				v-for="(pattern, key, index) in world.patterns">
					<span class="left" style="line-height: 36px;">Pattern {{key}}</span>
					<span class="right">
						<a class="btn-flat grey-text lighten-5-text waves-light waves-effect"
							@click="setCurrentPattern(key)">SET</a>
						<a class="btn-flat grey-text lighten-5-text waves-light waves-effect"
							@click="editPattern(key)">{{editWorld_currentPattern==key ? 'DONE' : 'EDIT'}}</a>
					</span>
					<div class="edit" v-show="editWorld_currentPattern==key">
						<input type="number" v-model="pattern.length"> 
						<textarea class="materialize-textarea" v-model="pattern.pattern" @change="changed_pattern(key,pattern.pattern)"></textarea>
					</div>
				</div>
			</div>
			<div class="section">
				
				<a
					@click=""
					class="btn waves-effect waves-light amber darken-4 full-width">
				Update </a>
			</div>
		</div>

		<!--
			d888888b d88888b  .d8b.  .88b  d88. .d8888.
			`~~88~~' 88'     d8' `8b 88'YbdP`88 88'  YP
			   88    88ooooo 88ooo88 88  88  88 `8bo.
			   88    88~~~~~ 88~~~88 88  88  88   `Y8b.
			   88    88.     88   88 88  88  88 db   8D
			   YP    Y88888P YP   YP YP  YP  YP `8888Y'
			
			
		 -->

		<div class="col s6 m3 l2">
			<h6>Teams</h6>
			<div class="section widget">
				<small>Total Teams</small>
				<h5 class="amber-text">{{_.size(world.teams)}}</h5>
			</div>
			<div class="section widget">
				<small>On-Stage Teams</small>
				<h5 class="amber-text">{{currentTeamsOnStage[0]}}</h5>
				and
				<h5 class="amber-text">{{currentTeamsOnStage[1]}}</h5>
				<br>
				<a
					@click="editWorld_team_toggleEnableChangeTeamsOnStage()"
					class="btn waves-effect waves-light amber darken-4 full-width">
				{{editWorld_team_enableChangeTeamsOnStage ? 'Done Changing':'Change'}}
				</a>
				<br><br>
				<div class="row" v-show="editWorld_team_enableChangeTeamsOnStage">
					<p>Click to toggle teams</p>
					<div class="chip"
						v-for="team in world.teams"
						:class="{amber: (_.indexOf(world.teamsOnStage, team.id) != -1)}"
						@click="team_toggleCurrentTeamsOnStage(team.id)"
					>{{team.name}}</div>
				</div>
			</div>
			<div class="section">
				<h6 style="opacity: 0.4">All Teams</h6>
				<div class="row" v-for="team in world.teams">
					<span class="left">
						<input type="text" v-model="team.name"
						:style="{pointerEvents: (editWorld_team_enableEdits?'all':'none'), opacity:(editWorld_team_enableEdits?'1':'0.8')}"
						style="margin-bottom: 0">
					</span>
					<span class="right" 
					v-show="editWorld_team_enableEdits"
					@click="team_removeTeam(team.id)"><i style="line-height: 46px; cursor: pointer;" class="material-icons right">close</i></span>
					<span class="left" style="line-height: 46px">{{team.id}}</span>
					
				</div>
				<a
					@click="editWorld_team_toggleEnableEdits()"
					class="btn waves-effect waves-light amber darken-3">
				{{editWorld_team_enableEdits ? 'Done Editing' : 'Edit Teams' }} </a>
				<a
					v-show="!editWorld_team_enableAdds"
					@click="editWorld_team_toggleEnableAdds() "
					class="btn waves-effect waves-light amber darken-4">
				Add Team </a>
				<div class="row" v-show="editWorld_team_enableAdds">
					<br>
					<div class="divider"></div>
					<br>
					<br>
					<input type="text" v-model="editWorld_team_newTeam" placeholder="Enter Team name">
					<button 
					@click="teams_addTeam()"
					class="btn waves-effect waves-light amber darken-4 full-width">
						Add New Team
					</button>
				</div>
			</div>
		</div>

		<!--
			   d88b db    db d8888b.  d888b  d88888b .d8888.
			   `8P' 88    88 88  `8D 88' Y8b 88'     88'  YP
			    88  88    88 88   88 88      88ooooo `8bo.
			    88  88    88 88   88 88  ooo 88~~~~~   `Y8b.
			db. 88  88b  d88 88  .8D 88. ~8~ 88.     db   8D
			Y8888P  ~Y8888P' Y8888D'  Y888P  Y88888P `8888Y'
			
			
		 -->

		<div class="col s12 m3 l2">
			<h6>Judges</h6>
			<div class="section widget">
				<small>Total Judges</small>
				<h5 class="amber-text">{{_.size(world.judges)}}</h5>
			</div>
			<div class="section">
				<h6 style="opacity: 0.4">All Judges</h6>
				<p>Click on a judge to show QR code</p>
				<div class="row" 
				:class="{'amber-text': (judge.id === editWorld_judges_activeJudge)}"
				@click="set_judges_activeJudge(judge)"
				v-for="judge in world.judges">
					<span class="left">{{judge.id}}</span>
					<span 
					@click="judges_removeJudge(judge.id)"
					v-show="editWorld_judges_enableEdits" 
					class="right"><i class="material-icons">close</i></span>
					<template v-if="judge.connected">
						<span class="green-text">
							<i class="material-icons left" style="margin-left: 15px; margin-right: 4px;">fiber_manual_record</i> Connected
						</span>
					</template>
					<template v-else>
						<span class="blue-grey-text text-lighten-2">
							<i class="material-icons left" style="margin-left: 15px; margin-right: 4px;">fiber_manual_record</i> Offline
						</span>
					</template>
					<br>
					<span class="full-width yellow-text left" style="opacity: 0.9; text-transform: none;">{{ judge.name }}</span>
					<span class="full-width left" style="opacity: 0.7; text-transform: none;">{{(host) + '/judge?id=' + judge.id + '&hash=' + judge.hash}}</span>
				</div>

				<div class="row" v-show="editWorld_judges_activeJudge !== null">
				<p>url for {{editWorld_judges_activeJudge}}</p>
				<div id="qrcode" style="display: block; margin: 0 auto;"></div>
				</div>

				<div class="row">
					
				<a
					@click="editWorld_judges_toggleEnableEdits"
					class="btn waves-effect waves-light amber darken-3">
				{{editWorld_judges_enableEdits ? 'DONE' : 'EDIT'}} </a>
				<a
					@click="judges_createJudge"
					class="btn waves-effect waves-light amber darken-4">
				Create Judge </a>
				</div>
			</div>
		</div>

		<!--
			.d8888.  .o88b.  .d88b.  d8888b. d88888b .d8888.
			88'  YP d8P  Y8 .8P  Y8. 88  `8D 88'     88'  YP
			`8bo.   8P      88    88 88oobY' 88ooooo `8bo.
			  `Y8b. 8b      88    88 88`8b   88~~~~~   `Y8b.
			db   8D Y8b  d8 `8b  d8' 88 `88. 88.     db   8D
			`8888Y'  `Y88P'  `Y88P'  88   YD Y88888P `8888Y'
			
			
		 -->

		<div class="col s12 m3 l6 ">
			<h6>Scores</h6>
			<div class="section widget">
				<small>Leading Team</small>
				<h5 class="amber-text">{{this.world.teams[leadingTeam].name}} <small class="amber-text text-darken-2">{{leadingTeam_score}} pts</small></h5>
			</div>

			<div class="section">
				<table class="bordered responsive-table">
					<thead>
						<tr>
							<th>Team</th>
							<th v-once v-for="(pattern, index) in world.patterns">{{index}}</th>
							<th class="right">Total</th>
						</tr>
					</thead>
					<tbody>
						<tr v-for="team in orderedTeams" :class="{'amber-text': (_.indexOf(world.teamsOnStage,team.id) != -1)}">
							<td>{{team.name}} <small>{{team.id}}</small></td>
							<td v-for="(pattern, index) in world.patterns">
								<div v-for='judge in world.judges'>
									{{team.scores[judge.id][index-1]}}
									
								</div>
							</td>
							<td style="text-align: right;">{{totalScores[team.id].score}} pts.</td>
						</tr>
					</tbody>
						
				</table>
			</div>
		</div>
	</div>

	<br><br>
	<div class="row">
		<div class="col m12 center">
			<img src="/img/footer.png" style="position: fixed; bottom: 30px; right: 30px; " alt="">
		</div>
	</div>
</div>
<script>
var adminStorage = localStorage;
var autoSaveInterval;

/*
	d8888b. d88888b d88888b
	88  `8D 88'     88'
	88   88 88ooooo 88ooo
	88   88 88~~~~~ 88~~~
	88  .8D 88.     88
	Y8888D' Y88888P YP
	
	
*/

var app = new Vue({
	el: '#adminApp',
	data: {

		world:{
			saveCount: {
				count: 0,
				lastSaved: new Date()
			},
			currentPattern: 1,
			patterns: {},
			teamsOnStage: [],
			teams: {
				'team1':{
					id: 'team1',
					name: 'Team Name',
					scores: {
						judge1: [0,0,0,0,0,0,0,0,0,0],
					},
				}
			},
			judges: {
				'judge1': {id: 'judge1',  name:'Judge Name 1', hash: randomString(16, '#a'), connected: false},
			}
		},
		saveWorld_debounced: null,
		saveWorld_changing: false,

		editWorld_currentPattern: null,
		editWorld_currentTeams: null,

		editWorld_team_newTeam: null,
		editWorld_team_enableEdits: false,
		editWorld_team_enableAdds: false,
		editWorld_team_enableChangeTeamsOnStage: false,

		editWorld_judges_activeJudge: null,
		editWorld_judges_enableEdits: false,
		host: window.location.host,

		orderedByScore: true,
		leadingTeam: 'team1',
		leadingTeam_score: 0,

		total_clients: 0,
	},
	methods: {
		restoreJSON: function(){
				var _json = adminStorage.getItem('admin_data');

				if(!_.isNil(_json)){
					this.world = JSON.parse(_json);
					notify('Loaded saved data');
					return;
				}


				emitMessage('stats_main', this.world);
				notify('Fresh Start!');
			},
		saveJSON: function(){
			this.world.saveCount.count++;
			this.world.saveCount.lastSaved = new Date();

			console.dir(this.world.patterns[1].length);
			emitMessage('stats_main', this.world);
			var _json_string = JSON.stringify(this.world);
			adminStorage.setItem('admin_data', _json_string);
		},
		resetSavedData: function(){

			if(!confirm('This will reset ALL DATA. Can be restored, just once. Continue?')){
				return;
			}
			if(app.world.saveCount.count > 0){
				var _json_string = JSON.stringify(app.world);
				adminStorage.clear();
				adminStorage.setItem('admin_data_backup', _json_string);
				window.location = '';
				
			} else {
				notify('No fresh data to reset');
			}
		},
		restoreFromBackupSavedData: function(){
			var _json = adminStorage.getItem('admin_data_backup');
			if(!_.isNil(_json)){
				this.world = JSON.parse(_json);
			}
		},
		/*
			d888888b d88888b  .d8b.  .88b  d88. .d8888.
			`~~88~~' 88'     d8' `8b 88'YbdP`88 88'  YP
			   88    88ooooo 88ooo88 88  88  88 `8bo.
			   88    88~~~~~ 88~~~88 88  88  88   `Y8b.
			   88    88.     88   88 88  88  88 db   8D
			   YP    Y88888P YP   YP YP  YP  YP `8888Y'
			
			
		*/
		team_toggleCurrentTeamsOnStage: function(team_id){

			var _teamsOnStage = this.world.teamsOnStage;


			if(_.indexOf(_teamsOnStage, team_id) != -1){
				_teamsOnStage.splice(_teamsOnStage.indexOf(team_id), 1);

				// Vue.set(this.world, 'teamsOnStage', _teamsOnStage);

			} else {
				if(_.size(_teamsOnStage)<2){
					_teamsOnStage.push(team_id);
				} else {
					notify('2 members already on stage')
				}
			}
			
		},
		teams_addTeam: function(){

			if(!confirm('This will reset any existing scores. Continue?')){
				return;
			}
			var _teams = this.world.teams;

			var _id = 'team' + (_.size(_teams) + 2);
			_teams[_id] = {
				id: _id,
				name: this.editWorld_team_newTeam,
				scores: {
					0: [0,0,0,0,0,0,0,0,0,0],
					1: [0,0,0,0,0,0,0,0,0,0],
					2: [0,0,0,0,0,0,0,0,0,0],
				},
			}

			this.world.teams = _teams;

			this.editWorld_team_updateTeamIndexes();
			this.editWorld_scores_updateScoreIndexes();

			this.editWorld_team_newTeam = null;
			this.editWorld_team_enableAdds = false;
			notify('New Team added');

			
		},

		team_removeTeam: function(team_id){

			if(!confirm('This will reset any existing scores. Continue?')){
				return;
			}

			if(_.size(this.world.teams) < 2){
				notify('Only 1 team left. I Quit.');
				return;
			}
			var _newTeams = _.omit(this.world.teams, team_id);
			this.world.teams = _newTeams;

			this.editWorld_team_updateTeamIndexes()
		},	
		editWorld_team_updateTeamIndexes: function(){

			var _fixedTeams = {}
			var _oldTeams = this.world.teams;

			var _index = 1;
			_.forEach(_oldTeams, function(value, key) {
				value.id = 'team' + _index;
				_fixedTeams[value.id] = value;
				_index++;
			});

			this.world.teams = _fixedTeams;
		},
		
		editWorld_team_toggleEnableEdits: function(){
			this.editWorld_team_enableEdits = !this.editWorld_team_enableEdits;
		},
		editWorld_team_toggleEnableAdds: function(){

			if(this.editWorld_team_enableAdds) {
				editWorld_team_newTeam = null;
			}
			this.editWorld_team_enableAdds = !this.editWorld_team_enableAdds;

		},
		editWorld_team_toggleEnableChangeTeamsOnStage: function(){
			this.editWorld_team_enableChangeTeamsOnStage = !this.editWorld_team_enableChangeTeamsOnStage;
		},

		/*
			   d88b db    db d8888b.  d888b  d88888b
			   `8P' 88    88 88  `8D 88' Y8b 88'
			    88  88    88 88   88 88      88ooooo
			    88  88    88 88   88 88  ooo 88~~~~~
			db. 88  88b  d88 88  .8D 88. ~8~ 88.
			Y8888P  ~Y8888P' Y8888D'  Y888P  Y88888P
			
			
		*/

		createQRcode: function(id, hash){
			var _url = window.location.origin + '/judge?id=' + id + '&hash=' + hash;
		
			$("#qrcode").empty();
			new QRCode(document.getElementById("qrcode"), {
				text:_url,
				width: 180,
				height: 180,
			});

		},
		set_judges_activeJudge: function(judge){
			this.editWorld_judges_activeJudge = judge.id;
			this.createQRcode(judge.id, judge.hash);
		},
		editWorld_judges_toggleEnableEdits: function(){
			this.editWorld_judges_enableEdits = !this.editWorld_judges_enableEdits;
		},
		judges_createJudge: function(){

			if(!confirm('This will reset any existing scores. Continue?')){
				return;
			}

			var _judges = this.world.judges;

			var _id = 'judge' + (_.size(_judges) + 2);
			var _hash = randomString(16, '#a');
			_judges[_id] = {id: _id,  name:'Judge Name', hash:_hash, connected: false};

			this.world.judges = _judges;

			this.editWorld_judges_updateJudgeIndexes()

			notify('New Judge added');

			
		},

		judges_removeJudge: function(judge_id){


			if(!confirm('This will reset any existing scores. Continue?')){
				return;
			}

			var _newJudges = _.omit(this.world.judges, judge_id);
			this.world.judges = _newJudges;

			this.editWorld_judges_updateJudgeIndexes()
		},	
		editWorld_judges_updateJudgeIndexes: function(){

			var _fixedJudges = {}
			var _oldJudges = this.world.judges;

			var _index = 1;
			_.forEach(_oldJudges, function(value, key) {
				value.id = 'judge' + _index;
				_fixedJudges[value.id] = value;
				_index++;
			});

			this.world.judges = _fixedJudges;

			this.editWorld_scores_updateScoreIndexes();
		},

		/*
			.d8888.  .o88b.  .d88b.  d8888b. d88888b .d8888.
			88'  YP d8P  Y8 .8P  Y8. 88  `8D 88'     88'  YP
			`8bo.   8P      88    88 88oobY' 88ooooo `8bo.
			  `Y8b. 8b      88    88 88`8b   88~~~~~   `Y8b.
			db   8D Y8b  d8 `8b  d8' 88 `88. 88.     db   8D
			`8888Y'  `Y88P'  `Y88P'  88   YD Y88888P `8888Y'
			
			
		*/

		editWorld_scores_updateScoreIndexes: function(){

			var _fixedScores = {}

			var _index = 1;
			_.forEach(this.world.judges, function(value, key) {
				_fixedScores['judge' + _index] = [0,0,0,0,0,0,0,0,0,0];
				_index++;
			});

			for (var i = 1; i <= _.size(this.world.teams); i++) {
				Vue.set( this.world.teams['team' + i], 'scores', _.clone(_fixedScores));
			}

		},
		/*
			d8888b.  .d8b.  d888888b d888888b d88888b d8888b. d8b   db
			88  `8D d8' `8b `~~88~~' `~~88~~' 88'     88  `8D 888o  88
			88oodD' 88ooo88    88       88    88ooooo 88oobY' 88V8o 88
			88~~~   88~~~88    88       88    88~~~~~ 88`8b   88 V8o88
			88      88   88    88       88    88.     88 `88. 88  V888
			88      YP   YP    YP       YP    Y88888P 88   YD VP   V8P
			
			
		*/

		setCurrentPattern: function(id){
			this.world.currentPattern = id;

			emitMessage('commands_main',{
				type: 'change_display_pattern',
				value: id
			})
		},
		editPattern: function(id){
			if(this.editWorld_currentPattern == id){
				this.editWorld_currentPattern = null;
				return;
			}
			this.editWorld_currentPattern = id;
		},
		changed_pattern: function(id, _pattern){
			if(_.isString(_pattern)){
				app.world.patterns[id].pattern = JSON.parse(_pattern);
			}
		},
		getPatterns: function(){

			if(!_.isEmpty(this.world.patterns)){
				notify('Using updated patterns. Reset if needed.')
				return;
			}
			console.log('[getPatterns]', 'getting patterns');

			var _tmp_patterns = []
			var _tmp_patterns_obj = {};

			for (var i = 1; i <= 10; i++) {

				axios.get('patterns/pattern' + i + '.json')
				.then(function(response){

					_tmp_patterns.push(response.data);

					if(_tmp_patterns.length == 10){
						_tmp_patterns_obj = _.zipObject(_.range(1,11), _tmp_patterns);

						app.world.patterns = _tmp_patterns_obj;

						// console.dir(_tmp_patterns_obj);
						console.dir(app.world.patterns);
						console.log('[getPatterns]', 'patterns loaded');
					}
				})
				.catch(function(error){
					notify('error reading pattern' + i);
					console.error(error);
				});

			}



		},
	},
	computed: {
		currentTeamsOnStage: function(){

			var _teams = this.world.teamsOnStage;

			if(_.size(_teams) == 1){
				return [this.world.teams[_teams[0]].name, '??????'];
			} else if (_.size(_teams) == 2){
				return [this.world.teams[_teams[0]].name, this.world.teams[_teams[1]].name];
			}
			return ['??????', '??????']
		},

		orderedTeams: function(){
			if(this.orderedByScore){

				var _orderedArray = _.reverse(_.sortBy(this.totalScores, function(o){
									return o.score;
								}));

				var _orderedTeams = {}
				var vm = this;

				this.leadingTeam = _orderedArray[0].team;
				this.leadingTeam_score = _orderedArray[0].score;
				_.each(_orderedArray, function(o){
					_orderedTeams[o.team] = vm.world.teams[o.team];
				})

				return _orderedTeams;

			}
			return this.world.teams;
		},
		totalScores: function(){

			var _scores =_.mapValues(this.world.teams, function(o) { 
				return _.mapValues(o.scores, function(o) {
					return _.sum(o);
				}); 
			});

			var _totals = _.mapValues(_scores, function(o){
				return _.sum(_.values(o));
			})

			var _totalsFixed = {};

			_.forEach(_totals, function(value, key) {
				_totalsFixed[key] = {
					'team': key,
					'score': value
				}
			});

			return (_totalsFixed);
		},
	},
	created: function(){
		this.restoreJSON();
		this.getPatterns();
		autoSaveInterval = setInterval(function(){
			// app.restoreJSON();
			app.saveJSON();
		}, 30000);

	},
	watch: {
		world: {
			handler: function(e){

				if(!_.isNull(app.saveWorld_debounced)){
					app.saveWorld_debounced.cancel();
				}

				app.saveWorld_debounced = _.debounce(function(){
					app.saveJSON()
					// console.log('called debounce')
				}, 1000, {
					'leading': true,
					'trailing': false,
				});
				if(app.saveWorld_changing){
					app.saveWorld_debounced();
					app.saveWorld_changing = false;
				} else {
					app.saveWorld_changing = true;
				}
			},
			deep: true
		}
	}, 
});
</script>


<script>
  emitMessage('client', 'admin');

  socket.on('client_judge_on', function(data){
    var _key = data;
    var _judge = _.find(app.world.judges, function(o) { return _.isEqual(_key, o.hash) });

    _judge.connected = true;
    app.world.judges[_judge.id] = _judge;

    console.log(data);
  })
  socket.on('client_judge_off', function(data){
    var _key = data;
    var _judge = _.find(app.world.judges, function(o) { return _.isEqual(_key, o.hash) });

    _judge.connected = false;
    app.world.judges[_judge.id] = _judge;

    console.log(data);
  })
  socket.on('scores_judge', function(data){
  	var _judge = data.judge_id;
  	var _team = data.team_id;
  	var _scores = data.scores;

  	app.world.teams[_team].scores[_judge] = _scores;
    console.log(data);
  })
  socket.on('judge_name', function(data){
  	var _judge = data.id;
  	var _name = data.name;

  	app.world.judges[_judge].name = _name;
    console.log(data);
  })

  socket.on('total_clients', function(data){
  	var _total_clients = data

  	app.total_clients = _total_clients;
    console.log(data);
  })

  function hardResetLocalStorage(){
	if(!confirm('This will reset ALL DATA. Continue?')){
		return;
	}

  	localStorage.clear();
  	location.reload();
  }
</script>
<!-- end of body content -->
<%- include footer.ejs %>