<%- include header.ejs %>
<!-- body content -->

<div id="competitorApp" style="margin: 30px;">
  <div class="row">
    <div class="col">
    <hgroup>
      <h6 style="">Current Pattern</h6>
      <h4 class="orange-text" style="margin-top: 0; padding-top: 0;">
        Pattern {{currentPattern}}
      </h4>
    </hgroup>
    </div>
  </div>
  <div class="row pattern-list">
    <div class="col">
      <div v-show="!presentationMode" class="orange-text" @click="togglePresentationMode">
      [Press Pattern Number or Click to Change Pattern] <br>
      [Press SPACE to toggle auto rotation] <br>
      <br><br>
      </div>
      <div 
        v-for="pattern in patterns" 
        @click="display_setPattern(pattern)"
        :class="{'active-pattern': pattern==currentPattern}">
          Pattern {{pattern}}
      </div>
    </div>
  </div>
  <div class="row footer-images" style="padding: 20px;">
    <div class="col m6">
      <img class="left" src="/img/competition_logo.png" alt="">
    </div>
    <div class="col m6">
      <img class="right" style="position: absolute; bottom: 50px; right: 30px;" src="/img/footer.png" alt="">
    </div>
  </div>
</div>
<div id="threeJS_Simulator" class="simulator fullscreen"></div>

<script>
var app = new Vue({
  el: '#competitorApp',
  data: {
    presentationMode: false,

    currentPattern: 1,
    patterns: _.range(1,11),

    world:{
      saveCount: {
        count: 0,
        lastSaved: new Date()
      },
      currentPattern: 1,
      patterns: {},
      teamsOnStage: [],
      teams: {
        0:{
          id: 'team1',
          name: 'Team Name',
          scores: {
            0: [0,0,0,0,0,0,0,0,0,0],
            1: [0,0,0,0,0,0,0,0,0,0],
            2: [0,0,0,0,0,0,0,0,0,0],
          },
        }
      },
      judges: {
        0: 'Judge Name',
        1: 'Judge Name',
        2: 'Judge Name',
      }
    },

  },
  methods: {
    togglePresentationMode: function(){
      this.presentationMode = !this.presentationMode;
    },
    display_setPattern: function(pattern_number){
      if(!_.isFinite(pattern_number)){
        console.log('[display_setPattern] pattern_number: ', pattern_number);
        return;
      }

      pattern_number = +pattern_number;
      if(pattern_number==0) pattern_number = 10;
      this.currentPattern = pattern_number;
    },
  }
});
</script>


<script type="text/javascript" src="/js/simulator.js"></script>

<script>
  emitMessage('client',  'Competitor');

  socket.on('stats_main', function(data){
    app.world = data;
    console.log(data);
  })
  socket.on('commands_main', function(data){
    var _command = data.type;
    var _value = +data.value;

    if(_.isEqual(_command, 'change_display_pattern') && _.isFinite(_value)){
      console.log('changing', _value)

      app.display_setPattern(_value);
      setPattern(_value);
    }

    console.log(data);
  })
</script>
<!-- end of body content -->
<%- include footer.ejs %>